diff -r -U3 old/driver_sdk/install new/driver_sdk/install
--- old/driver_sdk/install	2016-12-15 20:27:16.000000000 +0100
+++ new/driver_sdk/install	2018-09-16 22:30:34.801569166 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 #  Script to install the RAIDCore drivers from the SDK for supported platforms
 #  (RedHat and SuSE). 
diff -r -U3 old/driver_sdk/src/Makefile new/driver_sdk/src/Makefile
--- old/driver_sdk/src/Makefile	2016-12-15 20:27:24.000000000 +0100
+++ new/driver_sdk/src/Makefile	2019-02-17 14:26:25.377337830 +0100
@@ -20,7 +20,7 @@
 RC_USER=$(shell whoami)
 RC_DATE=$(shell /bin/date)
 RC_BUILD_DATE=$(shell /bin/date +'%b %d %Y')
-PLATFORM=$(shell uname -i)
+PLATFORM=$(shell uname -m)
 
 EXTRA_CFLAGS += -D__LINUX__
 EXTRA_CFLAGS += -DRC_AHCI_SUPPORT -DRC_AMD_AHCI -DRC_AHCI_AUTOSENSE
@@ -89,7 +89,7 @@
 
 obj-m := rcraid.o
 
-rcraid-objs := rc_init.o rc_msg.o rc_mem_ops.o rc_event.o rc_config.o rcblob.${PLATFORM} \
+rcraid-objs := rc_init.o rc_msg.o rc_mem_ops.o rc_event.o rc_config.o rcblob.${PLATFORM}.o \
 	       vers.o
 
 .PHONY:	$(obj)/vers.c
@@ -98,6 +98,7 @@
 
 # hack to avoid warning about missing .rcblob.cmd file when modpost tries to
 # find all the sources
-.PHONY: $(obj)/rcblob.${PLATFORM}
-$(obj)/rcblob.${PLATFORM}:
+.PHONY: $(obj)/rcblob.${PLATFORM}.o
+$(obj)/rcblob.${PLATFORM}.o:
+	ln -sf `basename $@ .o` $@
 	@( echo "cmd_$@ := true"; echo "dep_$@ := \\"; echo "	$@ \\"; echo "" ) > $(obj)/.`basename $@`.cmd
diff -r -U3 old/driver_sdk/src/common_shell new/driver_sdk/src/common_shell
--- old/driver_sdk/src/common_shell	2016-12-15 20:27:22.000000000 +0100
+++ new/driver_sdk/src/common_shell	2018-09-16 22:30:34.801569166 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 # Common shell routines used by the top level install script (SDK and driver
 # disks) and also from the OS specific scripts in the SDK (also contains
diff -r -U3 old/driver_sdk/src/install_rh new/driver_sdk/src/install_rh
--- old/driver_sdk/src/install_rh	2016-12-15 20:27:24.000000000 +0100
+++ new/driver_sdk/src/install_rh	2018-09-16 22:30:34.801569166 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh 
+#!/bin/bash
 
 #  Script to install the driver into the /lib/modules tree for RedHat distros. 
 #  By default new drivers will be installed for the currently running kernel.
diff -r -U3 old/driver_sdk/src/install_suse new/driver_sdk/src/install_suse
--- old/driver_sdk/src/install_suse	2016-12-15 20:27:24.000000000 +0100
+++ new/driver_sdk/src/install_suse	2018-09-16 22:30:34.801569166 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh 
+#!/bin/bash
 
 #  Script to install the driver into the /lib/modules tree for SuSE distros. 
 #  By default new drivers will be installed for the currently running kernel.
diff -r -U3 old/driver_sdk/src/rc_adapter.h new/driver_sdk/src/rc_adapter.h
--- old/driver_sdk/src/rc_adapter.h	2016-12-15 20:27:30.000000000 +0100
+++ new/driver_sdk/src/rc_adapter.h	2019-02-10 15:21:14.151844317 +0100
@@ -40,7 +40,9 @@
 #define MAX_HBA             8
 #define MAX_TOTAL_PORTS     (MAX_HBA * MAX_PORTS_PER_HA)
 #define MAX_ARRAY           32
+#ifndef SECTOR_SIZE
 #define SECTOR_SIZE         512
+#endif
 
 #define PCI_CFG_SIZE    256
 typedef struct rc_hw_info {
diff -r -U3 old/driver_sdk/src/rc_init.c new/driver_sdk/src/rc_init.c
--- old/driver_sdk/src/rc_init.c	2016-12-15 20:27:32.000000000 +0100
+++ new/driver_sdk/src/rc_init.c	2019-04-22 20:53:21.484231806 +0200
@@ -169,7 +169,11 @@
 void        rc_dump_scp(struct scsi_cmnd * scp);
 const char *rc_info(struct Scsi_Host *host_ptr);
 void        rc_timeout(int to);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 void        rc_timeout_done(unsigned long data);
+#else
+void        rc_timeout_done(struct timer_list * t);
+#endif
 static int  rc_slave_cfg(struct scsi_device *sdev);
 int         rc_bios_params(struct scsi_device *sdev, struct block_device *bdev,
 			   sector_t capacity, int geom[]);
@@ -342,7 +346,9 @@
 #if LINUX_VERSION_CODE == KERNEL_VERSION(2,6,24)
 	.use_sg_chaining =         ENABLE_SG_CHAINING,
 #endif
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 0, 0)
 	.use_clustering =          ENABLE_CLUSTERING,
+#endif
 	.slave_configure =         rc_slave_cfg,
 };
 
@@ -2383,12 +2389,20 @@
 }
 
 void
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 rc_timeout_done(unsigned long data)
+#else
+rc_timeout_done(struct timer_list *t)
+#endif
 {
 	rc_softstate_t *state;
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 	state = (rc_softstate_t *)data;
 	init_timer(&state->rc_timeout);
+#else
+	state = from_timer(state, t, rc_timeout);
+	timer_setup(&state->rc_timeout, rc_timeout_done, 0);
+#endif
 	up(&state->rc_timeout_sema);
 }
 
@@ -2402,10 +2416,15 @@
 	 * set up timeout
 	 */
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 	init_timer(&state->rc_timeout);
 	state->rc_timeout.expires = jiffies  + to;
 	state->rc_timeout.data = (unsigned long)state;
 	state->rc_timeout.function = rc_timeout_done;
+#else
+	timer_setup(&state->rc_timeout, rc_timeout_done, 0);
+	state->rc_timeout.expires = jiffies + to;
+#endif
 	add_timer(&state->rc_timeout);
 	down(&state->rc_timeout_sema);
 }
diff -r -U3 old/driver_sdk/src/rc_mem_ops.c new/driver_sdk/src/rc_mem_ops.c
--- old/driver_sdk/src/rc_mem_ops.c	2016-12-15 20:27:34.000000000 +0100
+++ new/driver_sdk/src/rc_mem_ops.c	2018-09-16 22:30:34.801569166 +0200
@@ -19,6 +19,7 @@
  *
  ****************************************************************************/
 
+#include "linux/signal.h"
 #include "linux/vmalloc.h"
 #include "linux/wait.h"
 #include "linux/sched.h"
diff -r -U3 old/driver_sdk/src/rc_msg.c new/driver_sdk/src/rc_msg.c
--- old/driver_sdk/src/rc_msg.c	2016-12-15 20:27:34.000000000 +0100
+++ new/driver_sdk/src/rc_msg.c	2019-04-22 21:04:04.121303750 +0200
@@ -37,10 +37,18 @@
 
 void rc_msg_send_srb_function (rc_softstate_t *state, int function_code);
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 void rc_msg_timer(unsigned long data);
+#else
+void rc_msg_timer(struct timer_list * t);
+#endif
 
 void rc_msg_timeout(int to);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)
 void rc_msg_timeout_done(unsigned long data);
+#else
+void rc_msg_timeout_done(struct timer_list * t);
+#endif
 
 void rc_msg_isr(rc_adapter_t *adapter);
 void rc_msg_schedule_dpc(void);
@@ -200,15 +208,24 @@
 int32_t
 rc_vprintf(uint32_t severity, const char *format, va_list ar)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,0,0)
+	struct timespec ts;
+#else
 	struct timeval tv;
-        static int rc_saw_newline=1;
+#endif
+	static int rc_saw_newline=1;
 
 	if (severity > rc_msg_level)
 		return 0;
 
         if (severity && rc_saw_newline) {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 0, 0))
+		getnstimeofday(&ts);
+		printk("rcraid: (%li.%06li) ", ts.tv_sec, ts.tv_nsec / 1000);
+#else
 		do_gettimeofday(&tv);
 		printk("rcraid: (%li.%06li) ", tv.tv_sec, tv.tv_usec);
+#endif
 	}
 
         rc_saw_newline = strchr(format, '\n') ? 1 : 0;
@@ -1226,10 +1243,15 @@
 	/*
 	 * intialize the periodic timer for the OSIC
 	 */          
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 
 	init_timer(&state->timer);
 	state->timer.expires = jiffies  + state->timer_interval ;
 	state->timer.data = (unsigned long)state;
 	state->timer.function = rc_msg_timer;
+#else
+	timer_setup(&state->timer, rc_msg_timer, 0);
+	state->timer.expires = jiffies + state->timer_interval;	
+#endif
 	state->state |= ENABLE_TIMER;
  
 	add_timer(&state->timer);
@@ -1257,13 +1279,20 @@
 	return(0);
 }
 void
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 
 rc_msg_timer(unsigned long data)
+#else
+rc_msg_timer(struct timer_list * t)
+#endif
 {
 	rc_softstate_t *state;
 	rc_send_arg_t    args;
 
-
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 
 	state = (rc_softstate_t *)data;
+#else
+	state = from_timer(state, t, timer);
+#endif
 
 	if ((state->state & ENABLE_TIMER) == 0)
 		return;
@@ -1271,10 +1300,15 @@
 	/*
 	 * set up timeout
 	 */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 	 
 	init_timer(&state->timer);
 	state->timer.expires = jiffies  + state->timer_interval;
 	state->timer.data = (unsigned long)state;
 	state->timer.function = rc_msg_timer;
+#else
+	timer_setup(&state->timer, rc_msg_timer,0);
+	state->timer.expires = jiffies + state->timer_interval;
+#endif
 	add_timer(&state->timer);
 
 	spin_lock(&state->osic_lock);
@@ -2342,12 +2376,21 @@
 
 
 void
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 	 
 rc_msg_timeout_done(unsigned long data)
+#else
+rc_msg_timeout_done(struct timer_list * t)
+#endif
 {
 	rc_softstate_t *state;
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 	 
 	state = (rc_softstate_t *)data;
 	init_timer(&state->msg_timeout);
+#else
+	state = from_timer(state, t, msg_timeout);
+	timer_setup(&state->msg_timeout, rc_msg_timeout_done, 0);
+#endif
 	up(&state->msg_timeout_sema);
 }
 
@@ -2361,10 +2404,15 @@
 	 * set up timeout
 	 */
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4,15,0)	 	 
 	init_timer(&state->msg_timeout);
 	state->msg_timeout.expires = jiffies  + to;
 	state->msg_timeout.data = (unsigned long)state;
 	state->msg_timeout.function = rc_msg_timeout_done;
+#else
+	timer_setup(&state->msg_timeout, rc_msg_timeout_done, 0);
+	state->msg_timeout.expires = jiffies  + to;	
+#endif
 	add_timer(&state->msg_timeout);
 	down(&state->msg_timeout_sema);
 
@@ -2373,8 +2421,11 @@
 void 
 rc_msg_access_ok(rc_access_ok_t accessOk)
 {
-
-    accessOk.returnStatus = access_ok( VERIFY_WRITE , accessOk.access_location, accessOk.access_size);        
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 0, 0)
+    accessOk.returnStatus = access_ok( accessOk.access_location, accessOk.access_size);
+#else
+    accessOk.returnStatus = access_ok( VERIFY_WRITE , accessOk.access_location, accessOk.access_size);
+#endif
 }
 
 
diff -r -U3 old/driver_sdk/src/uninstall_rh new/driver_sdk/src/uninstall_rh
--- old/driver_sdk/src/uninstall_rh	2016-12-15 20:27:38.000000000 +0100
+++ new/driver_sdk/src/uninstall_rh	2018-09-16 22:30:34.805569156 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 
 #
 # Script to remove the driver(s) from an existing SuSE linux install
diff -r -U3 old/driver_sdk/src/uninstall_suse new/driver_sdk/src/uninstall_suse
--- old/driver_sdk/src/uninstall_suse	2016-12-15 20:27:38.000000000 +0100
+++ new/driver_sdk/src/uninstall_suse	2018-09-16 22:30:34.805569156 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh 
+#!/bin/bash
 #
 # Script to remove the driver(s) from an existing SuSE linux install
 # 
diff -r -U3 old/driver_sdk/uninstall new/driver_sdk/uninstall
--- old/driver_sdk/uninstall	2016-12-15 20:27:18.000000000 +0100
+++ new/driver_sdk/uninstall	2018-09-16 22:30:34.805569156 +0200
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 #
 #  Script to uninstall the RAIDCore drivers from the SDK for supported platforms
 #  (RedHat and SuSE). 
